
#pragma once

#include <vulkan/vulkan.h>

namespace vkb {

struct DispatchTable {
	DispatchTable() = default;
	DispatchTable(VkDevice const& device, PFN_vkGetDeviceProcAddr const& procAddr) {
		getDeviceQueue = (PFN_vkGetDeviceQueue)procAddr(device, "vkGetDeviceQueue");
		allocateMemory = (PFN_vkAllocateMemory)procAddr(device, "vkAllocateMemory");
		freeMemory = (PFN_vkFreeMemory)procAddr(device, "vkFreeMemory");
		mapMemory = (PFN_vkMapMemory)procAddr(device, "vkMapMemory");
		unmapMemory = (PFN_vkUnmapMemory)procAddr(device, "vkUnmapMemory");
		flushMappedMemoryRanges = (PFN_vkFlushMappedMemoryRanges)procAddr(device, "vkFlushMappedMemoryRanges");
		invalidateMappedMemoryRanges = (PFN_vkInvalidateMappedMemoryRanges)procAddr(device, "vkInvalidateMappedMemoryRanges");
		getDeviceMemoryCommitment = (PFN_vkGetDeviceMemoryCommitment)procAddr(device, "vkGetDeviceMemoryCommitment");
		getBufferMemoryRequirements = (PFN_vkGetBufferMemoryRequirements)procAddr(device, "vkGetBufferMemoryRequirements");
		bindBufferMemory = (PFN_vkBindBufferMemory)procAddr(device, "vkBindBufferMemory");
		getImageMemoryRequirements = (PFN_vkGetImageMemoryRequirements)procAddr(device, "vkGetImageMemoryRequirements");
		bindImageMemory = (PFN_vkBindImageMemory)procAddr(device, "vkBindImageMemory");
		getImageSparseMemoryRequirements = (PFN_vkGetImageSparseMemoryRequirements)procAddr(device, "vkGetImageSparseMemoryRequirements");
		createFence = (PFN_vkCreateFence)procAddr(device, "vkCreateFence");
		destroyFence = (PFN_vkDestroyFence)procAddr(device, "vkDestroyFence");
		resetFences = (PFN_vkResetFences)procAddr(device, "vkResetFences");
		getFenceStatus = (PFN_vkGetFenceStatus)procAddr(device, "vkGetFenceStatus");
		waitForFences = (PFN_vkWaitForFences)procAddr(device, "vkWaitForFences");
		createSemaphore = (PFN_vkCreateSemaphore)procAddr(device, "vkCreateSemaphore");
		destroySemaphore = (PFN_vkDestroySemaphore)procAddr(device, "vkDestroySemaphore");
		createEvent = (PFN_vkCreateEvent)procAddr(device, "vkCreateEvent");
		destroyEvent = (PFN_vkDestroyEvent)procAddr(device, "vkDestroyEvent");
		getEventStatus = (PFN_vkGetEventStatus)procAddr(device, "vkGetEventStatus");
		setEvent = (PFN_vkSetEvent)procAddr(device, "vkSetEvent");
		resetEvent = (PFN_vkResetEvent)procAddr(device, "vkResetEvent");
		createQueryPool = (PFN_vkCreateQueryPool)procAddr(device, "vkCreateQueryPool");
		destroyQueryPool = (PFN_vkDestroyQueryPool)procAddr(device, "vkDestroyQueryPool");
		getQueryPoolResults = (PFN_vkGetQueryPoolResults)procAddr(device, "vkGetQueryPoolResults");
		resetQueryPool = (PFN_vkResetQueryPool)procAddr(device, "vkResetQueryPool");
		createBuffer = (PFN_vkCreateBuffer)procAddr(device, "vkCreateBuffer");
		destroyBuffer = (PFN_vkDestroyBuffer)procAddr(device, "vkDestroyBuffer");
		createBufferView = (PFN_vkCreateBufferView)procAddr(device, "vkCreateBufferView");
		destroyBufferView = (PFN_vkDestroyBufferView)procAddr(device, "vkDestroyBufferView");
		createImage = (PFN_vkCreateImage)procAddr(device, "vkCreateImage");
		destroyImage = (PFN_vkDestroyImage)procAddr(device, "vkDestroyImage");
		getImageSubresourceLayout = (PFN_vkGetImageSubresourceLayout)procAddr(device, "vkGetImageSubresourceLayout");
		createImageView = (PFN_vkCreateImageView)procAddr(device, "vkCreateImageView");
		destroyImageView = (PFN_vkDestroyImageView)procAddr(device, "vkDestroyImageView");
		createShaderModule = (PFN_vkCreateShaderModule)procAddr(device, "vkCreateShaderModule");
		destroyShaderModule = (PFN_vkDestroyShaderModule)procAddr(device, "vkDestroyShaderModule");
		createPipelineCache = (PFN_vkCreatePipelineCache)procAddr(device, "vkCreatePipelineCache");
		destroyPipelineCache = (PFN_vkDestroyPipelineCache)procAddr(device, "vkDestroyPipelineCache");
		getPipelineCacheData = (PFN_vkGetPipelineCacheData)procAddr(device, "vkGetPipelineCacheData");
		mergePipelineCaches = (PFN_vkMergePipelineCaches)procAddr(device, "vkMergePipelineCaches");
		createGraphicsPipelines = (PFN_vkCreateGraphicsPipelines)procAddr(device, "vkCreateGraphicsPipelines");
		createComputePipelines = (PFN_vkCreateComputePipelines)procAddr(device, "vkCreateComputePipelines");
		destroyPipeline = (PFN_vkDestroyPipeline)procAddr(device, "vkDestroyPipeline");
		createPipelineLayout = (PFN_vkCreatePipelineLayout)procAddr(device, "vkCreatePipelineLayout");
		destroyPipelineLayout = (PFN_vkDestroyPipelineLayout)procAddr(device, "vkDestroyPipelineLayout");
		createSampler = (PFN_vkCreateSampler)procAddr(device, "vkCreateSampler");
		destroySampler = (PFN_vkDestroySampler)procAddr(device, "vkDestroySampler");
		createDescriptorSetLayout = (PFN_vkCreateDescriptorSetLayout)procAddr(device, "vkCreateDescriptorSetLayout");
		destroyDescriptorSetLayout = (PFN_vkDestroyDescriptorSetLayout)procAddr(device, "vkDestroyDescriptorSetLayout");
		createDescriptorPool = (PFN_vkCreateDescriptorPool)procAddr(device, "vkCreateDescriptorPool");
		destroyDescriptorPool = (PFN_vkDestroyDescriptorPool)procAddr(device, "vkDestroyDescriptorPool");
		resetDescriptorPool = (PFN_vkResetDescriptorPool)procAddr(device, "vkResetDescriptorPool");
		allocateDescriptorSets = (PFN_vkAllocateDescriptorSets)procAddr(device, "vkAllocateDescriptorSets");
		freeDescriptorSets = (PFN_vkFreeDescriptorSets)procAddr(device, "vkFreeDescriptorSets");
		updateDescriptorSets = (PFN_vkUpdateDescriptorSets)procAddr(device, "vkUpdateDescriptorSets");
		createFramebuffer = (PFN_vkCreateFramebuffer)procAddr(device, "vkCreateFramebuffer");
		destroyFramebuffer = (PFN_vkDestroyFramebuffer)procAddr(device, "vkDestroyFramebuffer");
		createRenderPass = (PFN_vkCreateRenderPass)procAddr(device, "vkCreateRenderPass");
		destroyRenderPass = (PFN_vkDestroyRenderPass)procAddr(device, "vkDestroyRenderPass");
		getRenderAreaGranularity = (PFN_vkGetRenderAreaGranularity)procAddr(device, "vkGetRenderAreaGranularity");
		createCommandPool = (PFN_vkCreateCommandPool)procAddr(device, "vkCreateCommandPool");
		destroyCommandPool = (PFN_vkDestroyCommandPool)procAddr(device, "vkDestroyCommandPool");
		resetCommandPool = (PFN_vkResetCommandPool)procAddr(device, "vkResetCommandPool");
		allocateCommandBuffers = (PFN_vkAllocateCommandBuffers)procAddr(device, "vkAllocateCommandBuffers");
		freeCommandBuffers = (PFN_vkFreeCommandBuffers)procAddr(device, "vkFreeCommandBuffers");
		createSharedSwapchainsKHR = (PFN_vkCreateSharedSwapchainsKHR)procAddr(device, "vkCreateSharedSwapchainsKHR");
		createSwapchainKHR = (PFN_vkCreateSwapchainKHR)procAddr(device, "vkCreateSwapchainKHR");
		destroySwapchainKHR = (PFN_vkDestroySwapchainKHR)procAddr(device, "vkDestroySwapchainKHR");
		getSwapchainImagesKHR = (PFN_vkGetSwapchainImagesKHR)procAddr(device, "vkGetSwapchainImagesKHR");
		acquireNextImageKHR = (PFN_vkAcquireNextImageKHR)procAddr(device, "vkAcquireNextImageKHR");
		debugMarkerSetObjectNameEXT = (PFN_vkDebugMarkerSetObjectNameEXT)procAddr(device, "vkDebugMarkerSetObjectNameEXT");
		debugMarkerSetObjectTagEXT = (PFN_vkDebugMarkerSetObjectTagEXT)procAddr(device, "vkDebugMarkerSetObjectTagEXT");
		getMemoryWin32HandleNV = (PFN_vkGetMemoryWin32HandleNV)procAddr(device, "vkGetMemoryWin32HandleNV");
		getGeneratedCommandsMemoryRequirementsNV = (PFN_vkGetGeneratedCommandsMemoryRequirementsNV)procAddr(device, "vkGetGeneratedCommandsMemoryRequirementsNV");
		createIndirectCommandsLayoutNV = (PFN_vkCreateIndirectCommandsLayoutNV)procAddr(device, "vkCreateIndirectCommandsLayoutNV");
		destroyIndirectCommandsLayoutNV = (PFN_vkDestroyIndirectCommandsLayoutNV)procAddr(device, "vkDestroyIndirectCommandsLayoutNV");
		trimCommandPool = (PFN_vkTrimCommandPool)procAddr(device, "vkTrimCommandPool");
		getMemoryWin32HandleKHR = (PFN_vkGetMemoryWin32HandleKHR)procAddr(device, "vkGetMemoryWin32HandleKHR");
		getMemoryWin32HandlePropertiesKHR = (PFN_vkGetMemoryWin32HandlePropertiesKHR)procAddr(device, "vkGetMemoryWin32HandlePropertiesKHR");
		getMemoryFdKHR = (PFN_vkGetMemoryFdKHR)procAddr(device, "vkGetMemoryFdKHR");
		getMemoryFdPropertiesKHR = (PFN_vkGetMemoryFdPropertiesKHR)procAddr(device, "vkGetMemoryFdPropertiesKHR");
		getMemoryZirconHandleFUCHSIA = (PFN_vkGetMemoryZirconHandleFUCHSIA)procAddr(device, "vkGetMemoryZirconHandleFUCHSIA");
		getMemoryZirconHandlePropertiesFUCHSIA = (PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA)procAddr(device, "vkGetMemoryZirconHandlePropertiesFUCHSIA");
		getSemaphoreWin32HandleKHR = (PFN_vkGetSemaphoreWin32HandleKHR)procAddr(device, "vkGetSemaphoreWin32HandleKHR");
		importSemaphoreWin32HandleKHR = (PFN_vkImportSemaphoreWin32HandleKHR)procAddr(device, "vkImportSemaphoreWin32HandleKHR");
		getSemaphoreFdKHR = (PFN_vkGetSemaphoreFdKHR)procAddr(device, "vkGetSemaphoreFdKHR");
		importSemaphoreFdKHR = (PFN_vkImportSemaphoreFdKHR)procAddr(device, "vkImportSemaphoreFdKHR");
		getSemaphoreZirconHandleFUCHSIA = (PFN_vkGetSemaphoreZirconHandleFUCHSIA)procAddr(device, "vkGetSemaphoreZirconHandleFUCHSIA");
		importSemaphoreZirconHandleFUCHSIA = (PFN_vkImportSemaphoreZirconHandleFUCHSIA)procAddr(device, "vkImportSemaphoreZirconHandleFUCHSIA");
		getFenceWin32HandleKHR = (PFN_vkGetFenceWin32HandleKHR)procAddr(device, "vkGetFenceWin32HandleKHR");
		importFenceWin32HandleKHR = (PFN_vkImportFenceWin32HandleKHR)procAddr(device, "vkImportFenceWin32HandleKHR");
		getFenceFdKHR = (PFN_vkGetFenceFdKHR)procAddr(device, "vkGetFenceFdKHR");
		importFenceFdKHR = (PFN_vkImportFenceFdKHR)procAddr(device, "vkImportFenceFdKHR");
		displayPowerControlEXT = (PFN_vkDisplayPowerControlEXT)procAddr(device, "vkDisplayPowerControlEXT");
		registerDeviceEventEXT = (PFN_vkRegisterDeviceEventEXT)procAddr(device, "vkRegisterDeviceEventEXT");
		registerDisplayEventEXT = (PFN_vkRegisterDisplayEventEXT)procAddr(device, "vkRegisterDisplayEventEXT");
		getSwapchainCounterEXT = (PFN_vkGetSwapchainCounterEXT)procAddr(device, "vkGetSwapchainCounterEXT");
		getDeviceGroupPeerMemoryFeatures = (PFN_vkGetDeviceGroupPeerMemoryFeatures)procAddr(device, "vkGetDeviceGroupPeerMemoryFeatures");
		bindBufferMemory2 = (PFN_vkBindBufferMemory2)procAddr(device, "vkBindBufferMemory2");
		bindImageMemory2 = (PFN_vkBindImageMemory2)procAddr(device, "vkBindImageMemory2");
		getDeviceGroupPresentCapabilitiesKHR = (PFN_vkGetDeviceGroupPresentCapabilitiesKHR)procAddr(device, "vkGetDeviceGroupPresentCapabilitiesKHR");
		getDeviceGroupSurfacePresentModesKHR = (PFN_vkGetDeviceGroupSurfacePresentModesKHR)procAddr(device, "vkGetDeviceGroupSurfacePresentModesKHR");
		acquireNextImage2KHR = (PFN_vkAcquireNextImage2KHR)procAddr(device, "vkAcquireNextImage2KHR");
		createDescriptorUpdateTemplate = (PFN_vkCreateDescriptorUpdateTemplate)procAddr(device, "vkCreateDescriptorUpdateTemplate");
		destroyDescriptorUpdateTemplate = (PFN_vkDestroyDescriptorUpdateTemplate)procAddr(device, "vkDestroyDescriptorUpdateTemplate");
		updateDescriptorSetWithTemplate = (PFN_vkUpdateDescriptorSetWithTemplate)procAddr(device, "vkUpdateDescriptorSetWithTemplate");
		setHdrMetadataEXT = (PFN_vkSetHdrMetadataEXT)procAddr(device, "vkSetHdrMetadataEXT");
		getSwapchainStatusKHR = (PFN_vkGetSwapchainStatusKHR)procAddr(device, "vkGetSwapchainStatusKHR");
		getRefreshCycleDurationGOOGLE = (PFN_vkGetRefreshCycleDurationGOOGLE)procAddr(device, "vkGetRefreshCycleDurationGOOGLE");
		getPastPresentationTimingGOOGLE = (PFN_vkGetPastPresentationTimingGOOGLE)procAddr(device, "vkGetPastPresentationTimingGOOGLE");
		getBufferMemoryRequirements2 = (PFN_vkGetBufferMemoryRequirements2)procAddr(device, "vkGetBufferMemoryRequirements2");
		getImageMemoryRequirements2 = (PFN_vkGetImageMemoryRequirements2)procAddr(device, "vkGetImageMemoryRequirements2");
		getImageSparseMemoryRequirements2 = (PFN_vkGetImageSparseMemoryRequirements2)procAddr(device, "vkGetImageSparseMemoryRequirements2");
		createSamplerYcbcrConversion = (PFN_vkCreateSamplerYcbcrConversion)procAddr(device, "vkCreateSamplerYcbcrConversion");
		destroySamplerYcbcrConversion = (PFN_vkDestroySamplerYcbcrConversion)procAddr(device, "vkDestroySamplerYcbcrConversion");
		getDeviceQueue2 = (PFN_vkGetDeviceQueue2)procAddr(device, "vkGetDeviceQueue2");
		createValidationCacheEXT = (PFN_vkCreateValidationCacheEXT)procAddr(device, "vkCreateValidationCacheEXT");
		destroyValidationCacheEXT = (PFN_vkDestroyValidationCacheEXT)procAddr(device, "vkDestroyValidationCacheEXT");
		getValidationCacheDataEXT = (PFN_vkGetValidationCacheDataEXT)procAddr(device, "vkGetValidationCacheDataEXT");
		mergeValidationCachesEXT = (PFN_vkMergeValidationCachesEXT)procAddr(device, "vkMergeValidationCachesEXT");
		getDescriptorSetLayoutSupport = (PFN_vkGetDescriptorSetLayoutSupport)procAddr(device, "vkGetDescriptorSetLayoutSupport");
		getSwapchainGrallocUsageANDROID = (PFN_vkGetSwapchainGrallocUsageANDROID)procAddr(device, "vkGetSwapchainGrallocUsageANDROID");
		getSwapchainGrallocUsage2ANDROID = (PFN_vkGetSwapchainGrallocUsage2ANDROID)procAddr(device, "vkGetSwapchainGrallocUsage2ANDROID");
		acquireImageANDROID = (PFN_vkAcquireImageANDROID)procAddr(device, "vkAcquireImageANDROID");
		getShaderInfoAMD = (PFN_vkGetShaderInfoAMD)procAddr(device, "vkGetShaderInfoAMD");
		setLocalDimmingAMD = (PFN_vkSetLocalDimmingAMD)procAddr(device, "vkSetLocalDimmingAMD");
		getCalibratedTimestampsEXT = (PFN_vkGetCalibratedTimestampsEXT)procAddr(device, "vkGetCalibratedTimestampsEXT");
		setDebugUtilsObjectNameEXT = (PFN_vkSetDebugUtilsObjectNameEXT)procAddr(device, "vkSetDebugUtilsObjectNameEXT");
		setDebugUtilsObjectTagEXT = (PFN_vkSetDebugUtilsObjectTagEXT)procAddr(device, "vkSetDebugUtilsObjectTagEXT");
		getMemoryHostPointerPropertiesEXT = (PFN_vkGetMemoryHostPointerPropertiesEXT)procAddr(device, "vkGetMemoryHostPointerPropertiesEXT");
		createRenderPass2 = (PFN_vkCreateRenderPass2)procAddr(device, "vkCreateRenderPass2");
		getSemaphoreCounterValue = (PFN_vkGetSemaphoreCounterValue)procAddr(device, "vkGetSemaphoreCounterValue");
		waitSemaphores = (PFN_vkWaitSemaphores)procAddr(device, "vkWaitSemaphores");
		signalSemaphore = (PFN_vkSignalSemaphore)procAddr(device, "vkSignalSemaphore");
		getAndroidHardwareBufferPropertiesANDROID = (PFN_vkGetAndroidHardwareBufferPropertiesANDROID)procAddr(device, "vkGetAndroidHardwareBufferPropertiesANDROID");
		getMemoryAndroidHardwareBufferANDROID = (PFN_vkGetMemoryAndroidHardwareBufferANDROID)procAddr(device, "vkGetMemoryAndroidHardwareBufferANDROID");
		compileDeferredNV = (PFN_vkCompileDeferredNV)procAddr(device, "vkCompileDeferredNV");
		createAccelerationStructureNV = (PFN_vkCreateAccelerationStructureNV)procAddr(device, "vkCreateAccelerationStructureNV");
		destroyAccelerationStructureKHR = (PFN_vkDestroyAccelerationStructureKHR)procAddr(device, "vkDestroyAccelerationStructureKHR");
		destroyAccelerationStructureNV = (PFN_vkDestroyAccelerationStructureNV)procAddr(device, "vkDestroyAccelerationStructureNV");
		getAccelerationStructureMemoryRequirementsNV = (PFN_vkGetAccelerationStructureMemoryRequirementsNV)procAddr(device, "vkGetAccelerationStructureMemoryRequirementsNV");
		bindAccelerationStructureMemoryNV = (PFN_vkBindAccelerationStructureMemoryNV)procAddr(device, "vkBindAccelerationStructureMemoryNV");
		copyAccelerationStructureKHR = (PFN_vkCopyAccelerationStructureKHR)procAddr(device, "vkCopyAccelerationStructureKHR");
		copyAccelerationStructureToMemoryKHR = (PFN_vkCopyAccelerationStructureToMemoryKHR)procAddr(device, "vkCopyAccelerationStructureToMemoryKHR");
		copyMemoryToAccelerationStructureKHR = (PFN_vkCopyMemoryToAccelerationStructureKHR)procAddr(device, "vkCopyMemoryToAccelerationStructureKHR");
		writeAccelerationStructuresPropertiesKHR = (PFN_vkWriteAccelerationStructuresPropertiesKHR)procAddr(device, "vkWriteAccelerationStructuresPropertiesKHR");
		getRayTracingShaderGroupHandlesKHR = (PFN_vkGetRayTracingShaderGroupHandlesKHR)procAddr(device, "vkGetRayTracingShaderGroupHandlesKHR");
		getRayTracingCaptureReplayShaderGroupHandlesKHR = (PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR)procAddr(device, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
		getAccelerationStructureHandleNV = (PFN_vkGetAccelerationStructureHandleNV)procAddr(device, "vkGetAccelerationStructureHandleNV");
		createRayTracingPipelinesNV = (PFN_vkCreateRayTracingPipelinesNV)procAddr(device, "vkCreateRayTracingPipelinesNV");
		createRayTracingPipelinesKHR = (PFN_vkCreateRayTracingPipelinesKHR)procAddr(device, "vkCreateRayTracingPipelinesKHR");
		getDeviceAccelerationStructureCompatibilityKHR = (PFN_vkGetDeviceAccelerationStructureCompatibilityKHR)procAddr(device, "vkGetDeviceAccelerationStructureCompatibilityKHR");
		getRayTracingShaderGroupStackSizeKHR = (PFN_vkGetRayTracingShaderGroupStackSizeKHR)procAddr(device, "vkGetRayTracingShaderGroupStackSizeKHR");
		getImageViewHandleNVX = (PFN_vkGetImageViewHandleNVX)procAddr(device, "vkGetImageViewHandleNVX");
		getImageViewAddressNVX = (PFN_vkGetImageViewAddressNVX)procAddr(device, "vkGetImageViewAddressNVX");
		getDeviceGroupSurfacePresentModes2EXT = (PFN_vkGetDeviceGroupSurfacePresentModes2EXT)procAddr(device, "vkGetDeviceGroupSurfacePresentModes2EXT");
		acquireFullScreenExclusiveModeEXT = (PFN_vkAcquireFullScreenExclusiveModeEXT)procAddr(device, "vkAcquireFullScreenExclusiveModeEXT");
		releaseFullScreenExclusiveModeEXT = (PFN_vkReleaseFullScreenExclusiveModeEXT)procAddr(device, "vkReleaseFullScreenExclusiveModeEXT");
		acquireProfilingLockKHR = (PFN_vkAcquireProfilingLockKHR)procAddr(device, "vkAcquireProfilingLockKHR");
		getImageDrmFormatModifierPropertiesEXT = (PFN_vkGetImageDrmFormatModifierPropertiesEXT)procAddr(device, "vkGetImageDrmFormatModifierPropertiesEXT");
		getBufferOpaqueCaptureAddress = (PFN_vkGetBufferOpaqueCaptureAddress)procAddr(device, "vkGetBufferOpaqueCaptureAddress");
		getBufferDeviceAddress = (PFN_vkGetBufferDeviceAddress)procAddr(device, "vkGetBufferDeviceAddress");
		initializePerformanceApiINTEL = (PFN_vkInitializePerformanceApiINTEL)procAddr(device, "vkInitializePerformanceApiINTEL");
		acquirePerformanceConfigurationINTEL = (PFN_vkAcquirePerformanceConfigurationINTEL)procAddr(device, "vkAcquirePerformanceConfigurationINTEL");
		releasePerformanceConfigurationINTEL = (PFN_vkReleasePerformanceConfigurationINTEL)procAddr(device, "vkReleasePerformanceConfigurationINTEL");
		getPerformanceParameterINTEL = (PFN_vkGetPerformanceParameterINTEL)procAddr(device, "vkGetPerformanceParameterINTEL");
		getDeviceMemoryOpaqueCaptureAddress = (PFN_vkGetDeviceMemoryOpaqueCaptureAddress)procAddr(device, "vkGetDeviceMemoryOpaqueCaptureAddress");
		getPipelineExecutablePropertiesKHR = (PFN_vkGetPipelineExecutablePropertiesKHR)procAddr(device, "vkGetPipelineExecutablePropertiesKHR");
		getPipelineExecutableStatisticsKHR = (PFN_vkGetPipelineExecutableStatisticsKHR)procAddr(device, "vkGetPipelineExecutableStatisticsKHR");
		getPipelineExecutableInternalRepresentationsKHR = (PFN_vkGetPipelineExecutableInternalRepresentationsKHR)procAddr(device, "vkGetPipelineExecutableInternalRepresentationsKHR");
		createAccelerationStructureKHR = (PFN_vkCreateAccelerationStructureKHR)procAddr(device, "vkCreateAccelerationStructureKHR");
		buildAccelerationStructuresKHR = (PFN_vkBuildAccelerationStructuresKHR)procAddr(device, "vkBuildAccelerationStructuresKHR");
		getAccelerationStructureDeviceAddressKHR = (PFN_vkGetAccelerationStructureDeviceAddressKHR)procAddr(device, "vkGetAccelerationStructureDeviceAddressKHR");
		createDeferredOperationKHR = (PFN_vkCreateDeferredOperationKHR)procAddr(device, "vkCreateDeferredOperationKHR");
		destroyDeferredOperationKHR = (PFN_vkDestroyDeferredOperationKHR)procAddr(device, "vkDestroyDeferredOperationKHR");
		getDeferredOperationMaxConcurrencyKHR = (PFN_vkGetDeferredOperationMaxConcurrencyKHR)procAddr(device, "vkGetDeferredOperationMaxConcurrencyKHR");
		getDeferredOperationResultKHR = (PFN_vkGetDeferredOperationResultKHR)procAddr(device, "vkGetDeferredOperationResultKHR");
		deferredOperationJoinKHR = (PFN_vkDeferredOperationJoinKHR)procAddr(device, "vkDeferredOperationJoinKHR");
		createPrivateDataSlotEXT = (PFN_vkCreatePrivateDataSlotEXT)procAddr(device, "vkCreatePrivateDataSlotEXT");
		destroyPrivateDataSlotEXT = (PFN_vkDestroyPrivateDataSlotEXT)procAddr(device, "vkDestroyPrivateDataSlotEXT");
		setPrivateDataEXT = (PFN_vkSetPrivateDataEXT)procAddr(device, "vkSetPrivateDataEXT");
		getPrivateDataEXT = (PFN_vkGetPrivateDataEXT)procAddr(device, "vkGetPrivateDataEXT");
		getAccelerationStructureBuildSizesKHR = (PFN_vkGetAccelerationStructureBuildSizesKHR)procAddr(device, "vkGetAccelerationStructureBuildSizesKHR");
		createVideoSessionKHR = (PFN_vkCreateVideoSessionKHR)procAddr(device, "vkCreateVideoSessionKHR");
		destroyVideoSessionKHR = (PFN_vkDestroyVideoSessionKHR)procAddr(device, "vkDestroyVideoSessionKHR");
		createVideoSessionParametersKHR = (PFN_vkCreateVideoSessionParametersKHR)procAddr(device, "vkCreateVideoSessionParametersKHR");
		updateVideoSessionParametersKHR = (PFN_vkUpdateVideoSessionParametersKHR)procAddr(device, "vkUpdateVideoSessionParametersKHR");
		destroyVideoSessionParametersKHR = (PFN_vkDestroyVideoSessionParametersKHR)procAddr(device, "vkDestroyVideoSessionParametersKHR");
		getVideoSessionMemoryRequirementsKHR = (PFN_vkGetVideoSessionMemoryRequirementsKHR)procAddr(device, "vkGetVideoSessionMemoryRequirementsKHR");
		bindVideoSessionMemoryKHR = (PFN_vkBindVideoSessionMemoryKHR)procAddr(device, "vkBindVideoSessionMemoryKHR");
	}
	PFN_vkGetDeviceQueue getDeviceQueue = nullptr;
	PFN_vkAllocateMemory allocateMemory = nullptr;
	PFN_vkFreeMemory freeMemory = nullptr;
	PFN_vkMapMemory mapMemory = nullptr;
	PFN_vkUnmapMemory unmapMemory = nullptr;
	PFN_vkFlushMappedMemoryRanges flushMappedMemoryRanges = nullptr;
	PFN_vkInvalidateMappedMemoryRanges invalidateMappedMemoryRanges = nullptr;
	PFN_vkGetDeviceMemoryCommitment getDeviceMemoryCommitment = nullptr;
	PFN_vkGetBufferMemoryRequirements getBufferMemoryRequirements = nullptr;
	PFN_vkBindBufferMemory bindBufferMemory = nullptr;
	PFN_vkGetImageMemoryRequirements getImageMemoryRequirements = nullptr;
	PFN_vkBindImageMemory bindImageMemory = nullptr;
	PFN_vkGetImageSparseMemoryRequirements getImageSparseMemoryRequirements = nullptr;
	PFN_vkCreateFence createFence = nullptr;
	PFN_vkDestroyFence destroyFence = nullptr;
	PFN_vkResetFences resetFences = nullptr;
	PFN_vkGetFenceStatus getFenceStatus = nullptr;
	PFN_vkWaitForFences waitForFences = nullptr;
	PFN_vkCreateSemaphore createSemaphore = nullptr;
	PFN_vkDestroySemaphore destroySemaphore = nullptr;
	PFN_vkCreateEvent createEvent = nullptr;
	PFN_vkDestroyEvent destroyEvent = nullptr;
	PFN_vkGetEventStatus getEventStatus = nullptr;
	PFN_vkSetEvent setEvent = nullptr;
	PFN_vkResetEvent resetEvent = nullptr;
	PFN_vkCreateQueryPool createQueryPool = nullptr;
	PFN_vkDestroyQueryPool destroyQueryPool = nullptr;
	PFN_vkGetQueryPoolResults getQueryPoolResults = nullptr;
	PFN_vkResetQueryPool resetQueryPool = nullptr;
	PFN_vkResetQueryPoolEXT resetQueryPoolEXT = nullptr;
	PFN_vkCreateBuffer createBuffer = nullptr;
	PFN_vkDestroyBuffer destroyBuffer = nullptr;
	PFN_vkCreateBufferView createBufferView = nullptr;
	PFN_vkDestroyBufferView destroyBufferView = nullptr;
	PFN_vkCreateImage createImage = nullptr;
	PFN_vkDestroyImage destroyImage = nullptr;
	PFN_vkGetImageSubresourceLayout getImageSubresourceLayout = nullptr;
	PFN_vkCreateImageView createImageView = nullptr;
	PFN_vkDestroyImageView destroyImageView = nullptr;
	PFN_vkCreateShaderModule createShaderModule = nullptr;
	PFN_vkDestroyShaderModule destroyShaderModule = nullptr;
	PFN_vkCreatePipelineCache createPipelineCache = nullptr;
	PFN_vkDestroyPipelineCache destroyPipelineCache = nullptr;
	PFN_vkGetPipelineCacheData getPipelineCacheData = nullptr;
	PFN_vkMergePipelineCaches mergePipelineCaches = nullptr;
	PFN_vkCreateGraphicsPipelines createGraphicsPipelines = nullptr;
	PFN_vkCreateComputePipelines createComputePipelines = nullptr;
	PFN_vkDestroyPipeline destroyPipeline = nullptr;
	PFN_vkCreatePipelineLayout createPipelineLayout = nullptr;
	PFN_vkDestroyPipelineLayout destroyPipelineLayout = nullptr;
	PFN_vkCreateSampler createSampler = nullptr;
	PFN_vkDestroySampler destroySampler = nullptr;
	PFN_vkCreateDescriptorSetLayout createDescriptorSetLayout = nullptr;
	PFN_vkDestroyDescriptorSetLayout destroyDescriptorSetLayout = nullptr;
	PFN_vkCreateDescriptorPool createDescriptorPool = nullptr;
	PFN_vkDestroyDescriptorPool destroyDescriptorPool = nullptr;
	PFN_vkResetDescriptorPool resetDescriptorPool = nullptr;
	PFN_vkAllocateDescriptorSets allocateDescriptorSets = nullptr;
	PFN_vkFreeDescriptorSets freeDescriptorSets = nullptr;
	PFN_vkUpdateDescriptorSets updateDescriptorSets = nullptr;
	PFN_vkCreateFramebuffer createFramebuffer = nullptr;
	PFN_vkDestroyFramebuffer destroyFramebuffer = nullptr;
	PFN_vkCreateRenderPass createRenderPass = nullptr;
	PFN_vkDestroyRenderPass destroyRenderPass = nullptr;
	PFN_vkGetRenderAreaGranularity getRenderAreaGranularity = nullptr;
	PFN_vkCreateCommandPool createCommandPool = nullptr;
	PFN_vkDestroyCommandPool destroyCommandPool = nullptr;
	PFN_vkResetCommandPool resetCommandPool = nullptr;
	PFN_vkAllocateCommandBuffers allocateCommandBuffers = nullptr;
	PFN_vkFreeCommandBuffers freeCommandBuffers = nullptr;
	PFN_vkCreateSharedSwapchainsKHR createSharedSwapchainsKHR = nullptr;
	PFN_vkCreateSwapchainKHR createSwapchainKHR = nullptr;
	PFN_vkDestroySwapchainKHR destroySwapchainKHR = nullptr;
	PFN_vkGetSwapchainImagesKHR getSwapchainImagesKHR = nullptr;
	PFN_vkAcquireNextImageKHR acquireNextImageKHR = nullptr;
	PFN_vkDebugMarkerSetObjectNameEXT debugMarkerSetObjectNameEXT = nullptr;
	PFN_vkDebugMarkerSetObjectTagEXT debugMarkerSetObjectTagEXT = nullptr;
	PFN_vkGetMemoryWin32HandleNV getMemoryWin32HandleNV = nullptr;
	PFN_vkGetGeneratedCommandsMemoryRequirementsNV getGeneratedCommandsMemoryRequirementsNV = nullptr;
	PFN_vkCreateIndirectCommandsLayoutNV createIndirectCommandsLayoutNV = nullptr;
	PFN_vkDestroyIndirectCommandsLayoutNV destroyIndirectCommandsLayoutNV = nullptr;
	PFN_vkTrimCommandPool trimCommandPool = nullptr;
	PFN_vkTrimCommandPoolKHR trimCommandPoolKHR = nullptr;
	PFN_vkGetMemoryWin32HandleKHR getMemoryWin32HandleKHR = nullptr;
	PFN_vkGetMemoryWin32HandlePropertiesKHR getMemoryWin32HandlePropertiesKHR = nullptr;
	PFN_vkGetMemoryFdKHR getMemoryFdKHR = nullptr;
	PFN_vkGetMemoryFdPropertiesKHR getMemoryFdPropertiesKHR = nullptr;
	PFN_vkGetMemoryZirconHandleFUCHSIA getMemoryZirconHandleFUCHSIA = nullptr;
	PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA getMemoryZirconHandlePropertiesFUCHSIA = nullptr;
	PFN_vkGetSemaphoreWin32HandleKHR getSemaphoreWin32HandleKHR = nullptr;
	PFN_vkImportSemaphoreWin32HandleKHR importSemaphoreWin32HandleKHR = nullptr;
	PFN_vkGetSemaphoreFdKHR getSemaphoreFdKHR = nullptr;
	PFN_vkImportSemaphoreFdKHR importSemaphoreFdKHR = nullptr;
	PFN_vkGetSemaphoreZirconHandleFUCHSIA getSemaphoreZirconHandleFUCHSIA = nullptr;
	PFN_vkImportSemaphoreZirconHandleFUCHSIA importSemaphoreZirconHandleFUCHSIA = nullptr;
	PFN_vkGetFenceWin32HandleKHR getFenceWin32HandleKHR = nullptr;
	PFN_vkImportFenceWin32HandleKHR importFenceWin32HandleKHR = nullptr;
	PFN_vkGetFenceFdKHR getFenceFdKHR = nullptr;
	PFN_vkImportFenceFdKHR importFenceFdKHR = nullptr;
	PFN_vkDisplayPowerControlEXT displayPowerControlEXT = nullptr;
	PFN_vkRegisterDeviceEventEXT registerDeviceEventEXT = nullptr;
	PFN_vkRegisterDisplayEventEXT registerDisplayEventEXT = nullptr;
	PFN_vkGetSwapchainCounterEXT getSwapchainCounterEXT = nullptr;
	PFN_vkGetDeviceGroupPeerMemoryFeatures getDeviceGroupPeerMemoryFeatures = nullptr;
	PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR getDeviceGroupPeerMemoryFeaturesKHR = nullptr;
	PFN_vkBindBufferMemory2 bindBufferMemory2 = nullptr;
	PFN_vkBindBufferMemory2KHR bindBufferMemory2KHR = nullptr;
	PFN_vkBindImageMemory2 bindImageMemory2 = nullptr;
	PFN_vkBindImageMemory2KHR bindImageMemory2KHR = nullptr;
	PFN_vkGetDeviceGroupPresentCapabilitiesKHR getDeviceGroupPresentCapabilitiesKHR = nullptr;
	PFN_vkGetDeviceGroupSurfacePresentModesKHR getDeviceGroupSurfacePresentModesKHR = nullptr;
	PFN_vkAcquireNextImage2KHR acquireNextImage2KHR = nullptr;
	PFN_vkCreateDescriptorUpdateTemplate createDescriptorUpdateTemplate = nullptr;
	PFN_vkCreateDescriptorUpdateTemplateKHR createDescriptorUpdateTemplateKHR = nullptr;
	PFN_vkDestroyDescriptorUpdateTemplate destroyDescriptorUpdateTemplate = nullptr;
	PFN_vkDestroyDescriptorUpdateTemplateKHR destroyDescriptorUpdateTemplateKHR = nullptr;
	PFN_vkUpdateDescriptorSetWithTemplate updateDescriptorSetWithTemplate = nullptr;
	PFN_vkUpdateDescriptorSetWithTemplateKHR updateDescriptorSetWithTemplateKHR = nullptr;
	PFN_vkSetHdrMetadataEXT setHdrMetadataEXT = nullptr;
	PFN_vkGetSwapchainStatusKHR getSwapchainStatusKHR = nullptr;
	PFN_vkGetRefreshCycleDurationGOOGLE getRefreshCycleDurationGOOGLE = nullptr;
	PFN_vkGetPastPresentationTimingGOOGLE getPastPresentationTimingGOOGLE = nullptr;
	PFN_vkGetBufferMemoryRequirements2 getBufferMemoryRequirements2 = nullptr;
	PFN_vkGetBufferMemoryRequirements2KHR getBufferMemoryRequirements2KHR = nullptr;
	PFN_vkGetImageMemoryRequirements2 getImageMemoryRequirements2 = nullptr;
	PFN_vkGetImageMemoryRequirements2KHR getImageMemoryRequirements2KHR = nullptr;
	PFN_vkGetImageSparseMemoryRequirements2 getImageSparseMemoryRequirements2 = nullptr;
	PFN_vkGetImageSparseMemoryRequirements2KHR getImageSparseMemoryRequirements2KHR = nullptr;
	PFN_vkCreateSamplerYcbcrConversion createSamplerYcbcrConversion = nullptr;
	PFN_vkCreateSamplerYcbcrConversionKHR createSamplerYcbcrConversionKHR = nullptr;
	PFN_vkDestroySamplerYcbcrConversion destroySamplerYcbcrConversion = nullptr;
	PFN_vkDestroySamplerYcbcrConversionKHR destroySamplerYcbcrConversionKHR = nullptr;
	PFN_vkGetDeviceQueue2 getDeviceQueue2 = nullptr;
	PFN_vkCreateValidationCacheEXT createValidationCacheEXT = nullptr;
	PFN_vkDestroyValidationCacheEXT destroyValidationCacheEXT = nullptr;
	PFN_vkGetValidationCacheDataEXT getValidationCacheDataEXT = nullptr;
	PFN_vkMergeValidationCachesEXT mergeValidationCachesEXT = nullptr;
	PFN_vkGetDescriptorSetLayoutSupport getDescriptorSetLayoutSupport = nullptr;
	PFN_vkGetDescriptorSetLayoutSupportKHR getDescriptorSetLayoutSupportKHR = nullptr;
	PFN_vkGetSwapchainGrallocUsageANDROID getSwapchainGrallocUsageANDROID = nullptr;
	PFN_vkGetSwapchainGrallocUsage2ANDROID getSwapchainGrallocUsage2ANDROID = nullptr;
	PFN_vkAcquireImageANDROID acquireImageANDROID = nullptr;
	PFN_vkGetShaderInfoAMD getShaderInfoAMD = nullptr;
	PFN_vkSetLocalDimmingAMD setLocalDimmingAMD = nullptr;
	PFN_vkGetCalibratedTimestampsEXT getCalibratedTimestampsEXT = nullptr;
	PFN_vkSetDebugUtilsObjectNameEXT setDebugUtilsObjectNameEXT = nullptr;
	PFN_vkSetDebugUtilsObjectTagEXT setDebugUtilsObjectTagEXT = nullptr;
	PFN_vkGetMemoryHostPointerPropertiesEXT getMemoryHostPointerPropertiesEXT = nullptr;
	PFN_vkCreateRenderPass2 createRenderPass2 = nullptr;
	PFN_vkCreateRenderPass2KHR createRenderPass2KHR = nullptr;
	PFN_vkGetSemaphoreCounterValue getSemaphoreCounterValue = nullptr;
	PFN_vkGetSemaphoreCounterValueKHR getSemaphoreCounterValueKHR = nullptr;
	PFN_vkWaitSemaphores waitSemaphores = nullptr;
	PFN_vkWaitSemaphoresKHR waitSemaphoresKHR = nullptr;
	PFN_vkSignalSemaphore signalSemaphore = nullptr;
	PFN_vkSignalSemaphoreKHR signalSemaphoreKHR = nullptr;
	PFN_vkGetAndroidHardwareBufferPropertiesANDROID getAndroidHardwareBufferPropertiesANDROID = nullptr;
	PFN_vkGetMemoryAndroidHardwareBufferANDROID getMemoryAndroidHardwareBufferANDROID = nullptr;
	PFN_vkCompileDeferredNV compileDeferredNV = nullptr;
	PFN_vkCreateAccelerationStructureNV createAccelerationStructureNV = nullptr;
	PFN_vkDestroyAccelerationStructureKHR destroyAccelerationStructureKHR = nullptr;
	PFN_vkDestroyAccelerationStructureNV destroyAccelerationStructureNV = nullptr;
	PFN_vkGetAccelerationStructureMemoryRequirementsNV getAccelerationStructureMemoryRequirementsNV = nullptr;
	PFN_vkBindAccelerationStructureMemoryNV bindAccelerationStructureMemoryNV = nullptr;
	PFN_vkCopyAccelerationStructureKHR copyAccelerationStructureKHR = nullptr;
	PFN_vkCopyAccelerationStructureToMemoryKHR copyAccelerationStructureToMemoryKHR = nullptr;
	PFN_vkCopyMemoryToAccelerationStructureKHR copyMemoryToAccelerationStructureKHR = nullptr;
	PFN_vkWriteAccelerationStructuresPropertiesKHR writeAccelerationStructuresPropertiesKHR = nullptr;
	PFN_vkGetRayTracingShaderGroupHandlesKHR getRayTracingShaderGroupHandlesKHR = nullptr;
	PFN_vkGetRayTracingShaderGroupHandlesNV getRayTracingShaderGroupHandlesNV = nullptr;
	PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR getRayTracingCaptureReplayShaderGroupHandlesKHR = nullptr;
	PFN_vkGetAccelerationStructureHandleNV getAccelerationStructureHandleNV = nullptr;
	PFN_vkCreateRayTracingPipelinesNV createRayTracingPipelinesNV = nullptr;
	PFN_vkCreateRayTracingPipelinesKHR createRayTracingPipelinesKHR = nullptr;
	PFN_vkGetDeviceAccelerationStructureCompatibilityKHR getDeviceAccelerationStructureCompatibilityKHR = nullptr;
	PFN_vkGetRayTracingShaderGroupStackSizeKHR getRayTracingShaderGroupStackSizeKHR = nullptr;
	PFN_vkGetImageViewHandleNVX getImageViewHandleNVX = nullptr;
	PFN_vkGetImageViewAddressNVX getImageViewAddressNVX = nullptr;
	PFN_vkGetDeviceGroupSurfacePresentModes2EXT getDeviceGroupSurfacePresentModes2EXT = nullptr;
	PFN_vkAcquireFullScreenExclusiveModeEXT acquireFullScreenExclusiveModeEXT = nullptr;
	PFN_vkReleaseFullScreenExclusiveModeEXT releaseFullScreenExclusiveModeEXT = nullptr;
	PFN_vkAcquireProfilingLockKHR acquireProfilingLockKHR = nullptr;
	PFN_vkGetImageDrmFormatModifierPropertiesEXT getImageDrmFormatModifierPropertiesEXT = nullptr;
	PFN_vkGetBufferOpaqueCaptureAddress getBufferOpaqueCaptureAddress = nullptr;
	PFN_vkGetBufferOpaqueCaptureAddressKHR getBufferOpaqueCaptureAddressKHR = nullptr;
	PFN_vkGetBufferDeviceAddress getBufferDeviceAddress = nullptr;
	PFN_vkGetBufferDeviceAddressEXT getBufferDeviceAddressEXT = nullptr;
	PFN_vkInitializePerformanceApiINTEL initializePerformanceApiINTEL = nullptr;
	PFN_vkAcquirePerformanceConfigurationINTEL acquirePerformanceConfigurationINTEL = nullptr;
	PFN_vkReleasePerformanceConfigurationINTEL releasePerformanceConfigurationINTEL = nullptr;
	PFN_vkGetPerformanceParameterINTEL getPerformanceParameterINTEL = nullptr;
	PFN_vkGetDeviceMemoryOpaqueCaptureAddress getDeviceMemoryOpaqueCaptureAddress = nullptr;
	PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR getDeviceMemoryOpaqueCaptureAddressKHR = nullptr;
	PFN_vkGetPipelineExecutablePropertiesKHR getPipelineExecutablePropertiesKHR = nullptr;
	PFN_vkGetPipelineExecutableStatisticsKHR getPipelineExecutableStatisticsKHR = nullptr;
	PFN_vkGetPipelineExecutableInternalRepresentationsKHR getPipelineExecutableInternalRepresentationsKHR = nullptr;
	PFN_vkCreateAccelerationStructureKHR createAccelerationStructureKHR = nullptr;
	PFN_vkBuildAccelerationStructuresKHR buildAccelerationStructuresKHR = nullptr;
	PFN_vkGetAccelerationStructureDeviceAddressKHR getAccelerationStructureDeviceAddressKHR = nullptr;
	PFN_vkCreateDeferredOperationKHR createDeferredOperationKHR = nullptr;
	PFN_vkDestroyDeferredOperationKHR destroyDeferredOperationKHR = nullptr;
	PFN_vkGetDeferredOperationMaxConcurrencyKHR getDeferredOperationMaxConcurrencyKHR = nullptr;
	PFN_vkGetDeferredOperationResultKHR getDeferredOperationResultKHR = nullptr;
	PFN_vkDeferredOperationJoinKHR deferredOperationJoinKHR = nullptr;
	PFN_vkCreatePrivateDataSlotEXT createPrivateDataSlotEXT = nullptr;
	PFN_vkDestroyPrivateDataSlotEXT destroyPrivateDataSlotEXT = nullptr;
	PFN_vkSetPrivateDataEXT setPrivateDataEXT = nullptr;
	PFN_vkGetPrivateDataEXT getPrivateDataEXT = nullptr;
	PFN_vkGetAccelerationStructureBuildSizesKHR getAccelerationStructureBuildSizesKHR = nullptr;
	PFN_vkCreateVideoSessionKHR createVideoSessionKHR = nullptr;
	PFN_vkDestroyVideoSessionKHR destroyVideoSessionKHR = nullptr;
	PFN_vkCreateVideoSessionParametersKHR createVideoSessionParametersKHR = nullptr;
	PFN_vkUpdateVideoSessionParametersKHR updateVideoSessionParametersKHR = nullptr;
	PFN_vkDestroyVideoSessionParametersKHR destroyVideoSessionParametersKHR = nullptr;
	PFN_vkGetVideoSessionMemoryRequirementsKHR getVideoSessionMemoryRequirementsKHR = nullptr;
	PFN_vkBindVideoSessionMemoryKHR bindVideoSessionMemoryKHR = nullptr;
}

} // namespace vkb